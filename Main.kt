/*
Scenario in kotlin
Let’s say that you are helping the IT department of a large school. The school has a list of students. You want to allow the staff to search and retrieve a student’s information using either their name or their student ID. To allow for two search phrases you need two functions. One is for locating a student by ID and the other is for locating a student by name. You should consider that, in a real-world project, the student ID is normally generated by the system for each student. Therefore, you can depend on it being accurate and being present for each stored student. So, if the user searches for a student by ID and that ID is not present, the program should return null or error since that ID does not match with any of the stored IDs. If the user searches for a student by name and that name is not present, then the program should display "The student is not found".

In future steps of this exercise, you will handle both possibilities, for now just keep in mind that you need to return an error if the user enters an ID that is not stored and NPE is returned. "The student is not found" returns if an entered name does not match with any of the stored student names.

To summarize the requirements of this exercise:

Create a Student class with three arguments id as Int, name as String and grade as Double and create a list of students

Create a getStudentById function that has one parameter called id as an Int, that returns a student

Create a searchInStudents function that has one parameter called name as a String, that returns a nullable student

Get the values from the user that will be searched for
 */


data class Student (val id:Int, val name:String, val grade:Double)
    val students = listOf(
        Student(1,"Alice",85.5),
        Student(2,"Bob",90.0),
        Student(3,"Charlie",78.0),
        Student(4,"Diana",92.3))

// retrieving student by id

fun getStudentById(id:Int): Student? {
    return students.find{it.id == id}?: throw IllegalArgumentException("Error : Student ID $id not found.")
}

// retrieving student by name

fun searchInStudents(name: String):Student?{
    return students.find{it.name.equals(name, ignoreCase = true)}?: run {
        println("Student not found")
        null
    }

}

fun main() {
    println("................SCHOOL DEPARTMENT.................")
    println()

    // Print table header
    println("+----+---------+-------+")
    println("| ID | Name    | Grade |")
    println("+----+---------+-------+")

    // Print each student in a table row format
    for (student in students) {
        println("| %2d | %-7s | %5.1f |".format(student.id, student.name, student.grade))
    }

    // Print table footer
    println("+----+---------+-------+")

    // searching by ID
    println("Enter Student ID")
    val idInput = readln()?.toIntOrNull()
    if (idInput != null) {
        try {
            val studentById = getStudentById(idInput)
            println("Student found by Id : $studentById")
        } catch (e: IllegalArgumentException) {
            println(e.message)
        }
    }
       else {
           println("Invalid Id")
        }
    // searching by name
    println()
    println("Enter Student Name..")
     val nameInput = readLine()
    if(!nameInput.isNullOrBlank()){
        val studentByName = searchInStudents(nameInput)
        studentByName?.let {
            println("student found by name: $it")

        }
    }
    else
        {
          println("Not found")
        }


    }





